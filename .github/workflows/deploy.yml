name: Build & Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Optimize and minify files
      run: |
        # Install minification tools
        npm install -g html-minifier-terser
        
        # Create optimized directory
        mkdir -p optimized
        
        # Copy directory structure first
        find . -type d -not -path "./optimized/*" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.github/*" | while read dir; do
          mkdir -p "optimized/${dir#./}"
        done
        
        # List HTML files before processing
        echo "=== HTML files found ==="
        find . -name "*.html" -not -path "./optimized/*" -not -path "./.git/*" -not -path "./node_modules/*"
        
        # Minify HTML files while preserving directory structure
        find . -name "*.html" -not -path "./optimized/*" -not -path "./.git/*" -not -path "./node_modules/*" | while read file; do
          echo "Processing: $file"
          dir=$(dirname "$file")
          mkdir -p "optimized/${dir#./}"
          # Try minification, if it fails, copy the original file
          if html-minifier-terser --collapse-whitespace --remove-comments --minify-js --minify-css "$file" > "optimized/${file#./}" 2>/dev/null; then
            echo "‚úì Minified: $file"
          else
            echo "‚ö† Minification failed for $file, copying original"
            cp "$file" "optimized/${file#./}"
          fi
        done
        
        # Copy other files while preserving directory structure
        find . -type f ! -name "*.html" -not -path "./optimized/*" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.github/*" -not -name "README.md" -not -name "package*.json" | while read file; do
          dir=$(dirname "$file")
          mkdir -p "optimized/${dir#./}"
          cp "$file" "optimized/${file#./}"
        done
    
    - name: Debug - List optimized directory contents
      run: |
        echo "=== Contents of optimized directory ==="
        ls -la optimized/
        echo "=== HTML files in optimized directory ==="
        find optimized -name "*.html" -type f
        echo "=== All files in optimized directory ==="
        find optimized -type f
    
    - name: Upload optimized files to S3
      run: |
        # First, upload all non-HTML files
        aws s3 sync ./optimized s3://${{ secrets.S3_BUCKET_NAME }} \
          --delete \
          --cache-control "public, max-age=31536000" \
          --exclude "*.html" 
        
        # Then upload HTML files with shorter cache
        aws s3 sync ./optimized s3://${{ secrets.S3_BUCKET_NAME }} \
          --exclude "*" \
          --include "*.html" \
          --cache-control "public, max-age=3600" \
          --content-type "text/html"
    
    - name: Verify S3 upload
      run: |
        echo "=== Files in S3 bucket ==="
        aws s3 ls s3://${{ secrets.S3_BUCKET_NAME }} --recursive
    
    - name: Invalidate CloudFront cache
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
          --paths "/*"
    
    - name: Run security headers check
      run: |
        echo "üîí Setting up security headers..."
        # This would typically be done via Lambda@Edge or CloudFront Functions
    
    - name: Display deployment summary
      run: |
        echo "üöÄ Deployment Summary"
        echo "===================="
        echo "üìç S3 Bucket: ${{ secrets.S3_BUCKET_NAME }}"
        echo "üåê CloudFront: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}"
        echo "‚ö° Files optimized and minified"
        echo "üîÑ Cache invalidated"
        echo "‚úÖ Website is now live!"
        echo ""
        echo "üîó Your website should be available at:"
        echo "https://$(aws cloudfront get-distribution --id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --query 'Distribution.DomainName' --output text)"